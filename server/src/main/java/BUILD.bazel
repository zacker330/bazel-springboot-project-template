load("@rules_spring//springboot:springboot.bzl", "springboot")

package(default_visibility = ["//visibility:public"])

app_deps = [
    "@maven//:org_thymeleaf_thymeleaf",
    "@maven//:com_fasterxml_jackson_core_jackson_annotations",
    "@maven//:org_springframework_spring_beans",
    "@maven//:org_springframework_spring_core",
    "@maven//:org_springframework_boot_spring_boot_starter_thymeleaf",
    "@maven//:org_springframework_boot_spring_boot_loader_tools",
    "@maven//:org_springframework_boot_spring_boot_loader",
    "@maven//:org_springframework_boot_spring_boot",
    "@maven//:org_springframework_boot_spring_boot_autoconfigure",
    "@maven//:org_springframework_boot_spring_boot_starter_web",
    "@maven//:org_springframework_spring_context",
    "@maven//:org_springframework_spring_webmvc",
    "@maven//:org_springframework_boot_spring_boot_starter_validation",
    "@maven//:jakarta_servlet_jakarta_servlet_api",
    "@maven//:org_springframework_spring_web",
    "@maven//:ch_qos_logback_logback_classic",
    "@maven//:org_slf4j_slf4j_api"
]

java_library(
    name = "lib",
    srcs = glob(["**/*.java"]),
    deps = app_deps,
    resources = ["//server/src/main/resources:server-resources"],
)
java_binary(
    name = "main",
    main_class = "codes.showme.server.Main",
    resources = [
        "//server/src/main/resources:server-resources",
    ],
    srcs = glob(["**/*.java"]),
    deps = app_deps,
)

springboot(
    name = "demoapp",
    boot_app_class = "codes.showme.server.Main",
    java_library = ":lib",

    # DEPS ARE OPTIONAL HERE
    #  The springboot rule inherits all deps and runtime_deps from the java_library
#     deps = app_deps,

    # TO TEST THE DUPE CLASSES FEATURE:
    #   There is an intentionally duplicated class in lib1 and lib2. Do this:
    #   1. set fail_on_duplicate_classes = True
    #   2. comment out lib1 or lib2 in demoapp_dupeclass_allowlist.txt
    #   Build should fail due to the duplicate class.
    dupeclassescheck_enable = True,
    dupeclassescheck_ignorelist = "demoapp_dupeclass_allowlist.txt",

    # BANNED DEPS
    # These are dependencies that you never want in your springboot jar.
    # This is used to detect mistakes in your transitive dependency graph. They
    # might be test jars, or compile time jars like lombok. The list of strings
    # is matched against the dependency jar filenames with a 'contains' match.
#    deps_banned = ["junit", "mockito", "lombok","log4j2"],

    # Specify optional JVM args to use when the application is launched with 'bazel run'
    bazelrun_jvm_flags = "-Dcustomprop=gold -DcustomProp2=silver",

    # data files can be made available in the working directory for when the app is launched with bazel run
    bazelrun_data = ["//server/src/main/resources:server-resources"],
    # run the application in the background (command returns immediately)
    #bazelrun_background = True,

    # you may choose to override the launcher script that is used when you invoke 'bazel run //examples/demoapp'
#    bazelrun_script = "custom_bazelrun_script.sh",

    # if you have conflicting classes in dependency jar files, you can define the order in which the jars are loaded
    #  https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-executable-jar-format.html#executable-jar-war-index-files-classpath
#    deps_index_file = ":demoapp_classpath.idx",

    # sometimes packagers want to put certain files into the root of the springboot app jar
    # these addins will be copied into the root of the generated springboot jar
#    addins = [":info.txt", ":author.txt"],
)
